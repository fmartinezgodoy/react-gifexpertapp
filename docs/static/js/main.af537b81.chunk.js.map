{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACI,8BACI,sBAAMC,SAXO,SAACC,GAClBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAMQ,OAAOF,e,+BCPtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAClDH,GAFe,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,uDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAER,CAACpB,IAEGqB,EDf2BM,CAAa3B,GAAjCa,EADuB,EAC7BN,KAAca,EADe,EACfA,QACtB,OACI,sBAAKJ,UAAU,oCAAf,UACI,6BAAKhB,IACJoB,GACG,mBAAGJ,UAAU,qDAAb,qBAIJ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEO3BiB,EAnBM,WAAO,IAAD,EACa1C,mBAAS,CAAC,aADvB,mBAChBQ,EADgB,KACJT,EADI,KAGvB,OACI,gCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACKS,EAAWe,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCXlC6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.af537b81.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories((categories) => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </div>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n        category\n    )}&limit=10&api_key=Gb1u0iwfDoaEBXYQV6Cfy8VvPXAHrzXo`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        };\n    });\n\n    return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__slow\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <div className=\"animate__animated animate__fadeIn\">\n            <h3>{category}</h3>\n            {loading && (\n                <p className=\"animate__animated animate__flash animate__repeat-3\">\n                    Loading\n                </p>\n            )}\n            <div className=\"card-grid\">\n                {images.map((img) => (\n                    <GifGridItem key={img.id} {...img} />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGifs(category).then((imgs) => {\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                });\n            }, 1000);\n        });\n    }, [category]);\n\n    return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['willyrex']);\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {categories.map((category) => (\n                    <GifGrid key={category} category={category} />\n                ))}\n            </ol>\n        </div>\n    );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}